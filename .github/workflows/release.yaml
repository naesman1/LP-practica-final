# Nombre del workflow que aparecerá en la pestaña "Actions" de GitHub
name: CI/CD Pipeline

# Disparador: Este workflow se ejecuta en cada 'push' a la rama 'main'
on:
  push:
    branches: [ "main" ]

jobs:
  # -------------------------------------------------
  # JOB 1: Correr Tests
  # -------------------------------------------------
  test:
    name: Run Tests
    # Usamos la última versión de Ubuntu
    runs-on: ubuntu-latest

    steps:
      # 1. Clona el repositorio para tener el código
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Configura Python (usando la versión 3.11 como pide el README)
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Instala las dependencias (pip y las de requirements.txt)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Ejecuta los tests con cobertura
      # (El requisito pide "Testing: tests unitarios con cobertura")
      - name: Run tests with coverage
        run: pytest --cov

  # -------------------------------------------------
  # JOB 2: Construir y Subir Imagen Docker
  # -------------------------------------------------
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    # Dependencia: Este job solo se ejecuta si el job 'test' ha terminado con éxito
    needs: test

    # Permisos: Damos permiso al workflow para escribir en los "Packages" de GitHub (GHCR)
    permissions:
      contents: read
      packages: write

    steps:
      # 1. Clona el repositorio
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Inicia sesión en GitHub Container Registry (GHCR)
      # Usamos un GITHUB_TOKEN automático para la autenticación
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Tu nombre de usuario de GitHub
          password: ${{ secrets.GITHUB_TOKEN }} # Un token temporal de GitHub

      # 3. Extrae metadatos (tags) para la imagen Docker
      # (El requisito pide una "estrategia de release para los tags")
      # Esto generará tags automáticamente, como :latest y :<git-sha>
      # ej: ghcr.io/naesman1/lp-practica-final:latest
      # ej: ghcr.io/naesman1/lp-practica-final:a1b2c3d4e5
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # El nombre de la imagen será tu_usuario/tu_repo (en minúsculas)
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest
            type=sha,prefix=,format=short # Tag de release (el hash del commit)

      # 4. Construye y sube (push) la imagen Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Usa el Dockerfile de la raíz
          push: true # Queremos subirla (push)
          tags: ${{ steps.meta.outputs.tags }} # Usa los tags del paso anterior
          labels: ${{ steps.meta.outputs.labels }} # Añade labels a la imagen
          